cmake_minimum_required(VERSION 3.16)
cmake_policy(SET CMP0110 NEW)

set(PROJECT_NAME entity)

project(
  ${PROJECT_NAME}
  VERSION 1.0.0.3
  LANGUAGES CXX C)
add_compile_options("-D ENTITY_VERSION=\"${PROJECT_VERSION}\"")
set(CMAKE_CXX_EXTENSIONS OFF)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/styling.cmake)

# ----------------------------- Configurations ----------------------------- #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/defaults.cmake)

# defaults
set(DEBUG
    ${default_debug}
    CACHE BOOL "Debug mode")
set(engine
    ${default_engine}
    CACHE STRING "Simulation engine")
set(precision
    ${default_precision}
    CACHE STRING "Precision")
set(pgen
    ${default_pgen}
    CACHE STRING "Problem generator")

set(gui
    ${default_gui}
    CACHE BOOL "Use GUI [nttiny]")
set(output
    ${default_output}
    CACHE BOOL "Enable output")

set(mpi
    ${default_mpi}
    CACHE BOOL "Use MPI")

# -------------------------- Compilation settings -------------------------- #
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(${DEBUG} STREQUAL "OFF")
  set(CMAKE_BUILD_TYPE
      Release
      CACHE STRING "CMake build type")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DNDEBUG")
  message(STATUS "Release mode")
else()
  set(CMAKE_BUILD_TYPE
      Debug
      CACHE STRING "CMake build type")
  set(CMAKE_CXX_FLAGS
      "${CMAKE_CXX_FLAGS} -DDEBUG -Wall -Wextra -Wno-unknown-pragmas")
  message(STATUS "Debug mode")
endif()

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs")

# options
set(simulation_engines
    "sandbox" "pic" "grpic"
    CACHE STRING "Simulation engines")
set(precisions
    "single" "double"
    CACHE STRING "Precisions")
set(sr_metrics
    "minkowski" "spherical" "qspherical"
    CACHE STRING "SR metrics")
set(gr_metrics
    "kerr_schild" "qkerr_schild" "kerr_schild_0"
    CACHE STRING "GR metrics")

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/config.cmake)

# ------------------------- Third-Party Tests ------------------------------ #
set(BUILD_TESTING
    OFF
    CACHE BOOL "Build tests")

# ------------------------------ Dependencies ------------------------------ #
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/kokkosConfig.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/dependencies.cmake)

find_or_fetch_dependency(Kokkos FALSE)
find_or_fetch_dependency(plog TRUE)
find_or_fetch_dependency(toml11 TRUE)
set(DEPENDENCIES Kokkos::kokkos)
include_directories(${plog_SRC}/include)
include_directories(${toml11_SRC})

# -------------------------------- Main code ------------------------------- #
set_precision(${precision})

# MPI
if(${mpi})
  include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/MPIConfig.cmake)
  set(DEPENDENCIES ${DEPENDENCIES} MPI::MPI_CXX)
endif()

# Output
if(${output})
  include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/adios2Config.cmake)
  find_or_fetch_dependency(adios2 FALSE)

  if(${mpi})
    set(DEPENDENCIES ${DEPENDENCIES} adios2::cxx11_mpi)
  else()
    set(DEPENDENCIES ${DEPENDENCIES} adios2::cxx11)
  endif()
endif()

link_libraries(${DEPENDENCIES})

if(TESTS)
  # ---------------------------------- Tests --------------------------------- #
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests tests)
elseif(BENCHMARKS)
  # ------------------------------- Benchmarks ------------------------------- #
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/benchmarks benchmarks)
else()
  # ----------------------------------- GUI ---------------------------------- #
  if(${gui})
    find_or_fetch_dependency(nttiny FALSE)
  endif()

  # ------------------------------- Main source ------------------------------ #
  set_engine(${engine})
  set(metric
      ${default_metric}
      CACHE STRING "Metric")
  set_metric(${metric} ${engine})
  set_problem_generator(${pgen} ${engine})
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src src)
  include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/report.cmake)
endif(TESTS)

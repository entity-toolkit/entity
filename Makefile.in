# # # # # Scripts # # # # # # # # # # # #
#
rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
# # # # # Directories # # # # # # # # # #
#
ROOT_DIR := $(realpath ${CURDIR}/..)
# directory for the building
BUILD_DIR := @BUILD_DIR@
# directory for the executable
BIN_DIR := ${ROOT_DIR}/@BIN_DIR@

TARGET := @NTT_TARGET@
TEST_TARGET := @TEST_TARGET@

NTT_DIR := ${ROOT_DIR}/@NTT_DIR@
BUILD_NTT_DIR := @NTT_DIR@

PGEN_DIR := ${ROOT_DIR}/@NTT_DIR@/@PGEN_DIR@

PGEN := @PGEN@

TEST_DIR := ${ROOT_DIR}/@TEST_DIR@
BUILD_TEST_DIR := @TEST_DIR@

SRC_DIR := ${ROOT_DIR}/@SRC_DIR@
BUILD_SRC_DIR := @SRC_DIR@

# external libraries
EXT_DIR := ${ROOT_DIR}/@EXTERN_DIR@

# # # # # Settings # # # # # # # # # # # #
#
DEBUGMODE := @DEBUGMODE@
VERBOSE := @VERBOSE@

DEFINITIONS := @DEFINITIONS@

ifeq ($(strip ${VERBOSE}), y)
	HIDE =
	PREPFLAGS = -DVERBOSE
else
	HIDE = @
endif

# 3-rd party library configurations
KOKKOS_PATH := ${EXT_DIR}/kokkos
KOKKOS_BUILD_DIR = ${BUILD_DIR}/kokkos/

KOKKOS_ARCH := @KOKKOS_ARCH@
KOKKOS_DEVICES := @KOKKOS_DEVICES@
KOKKOS_OPTIONS := @KOKKOS_OPTIONS@

KOKKOS_CUDA_OPTIONS := @KOKKOS_CUDA_OPTIONS@
KOKKOS_CXX_STANDARD := @CXXSTANDARD@

PREPFLAGS := ${PREPFLAGS} @KOKKOS_LOOP_LAYOUT@ @KOKKOS_VECTOR_LENGTH@

# # # # # Compiler and flags # # # # # # #
#
CXX := @COMPILER@
LINK := ${CXX}
CXXSTANDARD := -std=@CXXSTANDARD@
ifeq ($(strip ${DEBUGMODE}), n)
	# linker configuration flags (e.g. optimization level)
	CFLAGS := @RELEASE_CFLAGS@
else
	CFLAGS := @DEBUG_CFLAGS@
endif

# warning flags
WARNFLAGS := @WARNING_FLAGS@

# custom preprocessor flags
PREPFLAGS := $(PREPFLAGS) @PRECISION@ @COORDSYSTEM@

CFLAGS := $(CFLAGS) $(WARNFLAGS) $(PREPFLAGS)
LIBS :=

# # # # # Targets # # # # # # # # # # # # # #
#
.PHONY: all help ntt test clean demo cleanlib pgenIsSpecified

default: help demo

all: ntt test

# linking the main app
ntt : pgenIsSpecified ${BIN_DIR}/${TARGET}
	@echo [M]aking $@

# Problem generator
pgenIsSpecified:
ifeq (${PGEN},)
	$(error ERROR: no problem generator specified)
endif

ifeq (${PGEN},)
PGEN := ntt_dummy
endif

# linking tests
test : ${BIN_DIR}/${TEST_TARGET}
	@echo [M]aking $@

help:
	@echo
	@echo "usage: \`make [ ntt | vis | test | all | demo ]\`"
	@echo
	@echo "cleanup: \`make clean\`"
	@echo

demo:
	@echo "[C]ompile command:"
	@echo ${compile_command} -c \<.cpp\> -o \<.o\>
	@echo
	@echo "[L]ink command:"
	@echo ${link_command} \<.o\> $(LIBS) -o \<EXE\>

# # # # # File collection # # # # # # # # # # #
#
# Main core
SRCS := $(shell find ${SRC_DIR} -name *.cpp -or -name *.c)
OBJS := $(subst ${SRC_DIR},${BUILD_SRC_DIR},$(SRCS:%=%.o))
DEPS := $(OBJS:.o=.d)

# Problem generator
PGEN_SRCS := ${PGEN_DIR}/${PGEN}.cpp
PGEN_OBJS := $(subst ${NTT_DIR},${BUILD_NTT_DIR},$(PGEN_SRCS:%=%.o))
PGEN_DEPS := $(PGEN_OBJS:.o=.d)

# NTT app
NTT_SRCS := $(shell find ${NTT_DIR} -path ${PGEN_DIR} -prune -false -o -name *.cpp -or -name *.c)
NTT_OBJS := $(subst ${NTT_DIR},${BUILD_NTT_DIR},$(NTT_SRCS:%=%.o))
NTT_DEPS := $(NTT_OBJS:.o=.d)

# Tests
TEST_SRCS := $(shell find ${TEST_DIR} -name *.cpp -or -name *.c)
TEST_OBJS := $(subst ${TEST_DIR},${BUILD_TEST_DIR},$(TEST_SRCS:%=%.o))
TEST_DEPS := $(TEST_OBJS:.o=.d)

ALL_DEPS := $(DEPS) $(NTT_DEPS) $(TEST_DEPS)

INC_DIRS := $(shell find ${SRC_DIR} -type d) ${EXT_DIR}/plog/include ${EXT_DIR}/acutest/include ${EXT_DIR}
INCFLAGS := $(addprefix -I,${INC_DIRS})

ALL_OBJS := $(OBJS) $(PGEN_OBJS) $(NTT_OBJS) $(TEST_OBJS)

# # # # # Link/compile # # # # # # # # # # # # # #
#
# using `Kokkos`
include ${KOKKOS_PATH}/Makefile.kokkos
OBJS := $(OBJS) $(KOKKOS_LINK_DEPENDS)
CFLAGS := $(CFLAGS) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS)
LDFLAGS := $(LDFLAGS) $(KOKKOS_LDFLAGS)
LIBS := $(LIBS) $(KOKKOS_LIBS)

compile_command := ${CXX} ${CXXSTANDARD} $(INCFLAGS) $(DEFINITIONS) $(CFLAGS) -MMD
link_command := ${LINK} $(LDFLAGS)

${BIN_DIR}/${TARGET} : $(NTT_OBJS) $(PGEN_OBJS) $(OBJS)
	@echo [L]inking $(notdir $@) from $<
	$(HIDE)mkdir -p ${BIN_DIR}
	$(HIDE)${link_command} $^ -o $@ $(LIBS)

${BIN_DIR}/${TEST_TARGET} : $(TEST_OBJS) $(PGEN_OBJS) $(OBJS)
	@echo [L]inking $(notdir $@) from $^
	$(HIDE)mkdir -p ${BIN_DIR}
	$(HIDE)${link_command} $^ -o $@ $(LIBS)

${BUILD_NTT_DIR}/%.o : ${NTT_DIR}/%
	@echo [C]ompiling \`ntt\`: $(subst ${ROOT_DIR}/,,$<)
	$(HIDE)mkdir -p $(dir $@)
	$(HIDE)${compile_command} -include ${PGEN_DIR}/${PGEN}.hpp -c $< -o $@

${BUILD_SRC_DIR}/%.o : ${SRC_DIR}/%
	@echo [C]ompiling \`src\`: $(subst ${ROOT_DIR}/,,$<)
	$(HIDE)mkdir -p $(dir $@)
	$(HIDE)${compile_command} -include ${PGEN_DIR}/${PGEN}.hpp -c $< -o $@

${BUILD_TEST_DIR}/%.o : ${TEST_DIR}/%
	@echo [C]ompiling \`tests\`: $(subst ${ROOT_DIR}/,,$<)
	$(HIDE)mkdir -p $(dir $@)
	$(HIDE)${compile_command} -include ${PGEN_DIR}/${PGEN}.hpp -c $< -o $@

-include $(ALL_DEPS)

# for nttiny />
NTTINY_DIR := @NTTINY_DIR@
VIS_DIR := ${ROOT_DIR}/@VIS_DIR@
include ${ROOT_DIR}/Nttiny.mk
# </ for nttiny

clean:
	rm -rf ${BUILD_SRC_DIR} ${BUILD_NTT_DIR} ${BUILD_TEST_DIR} ${BUILD_VIS_DIR}
	rm -rf ${BIN_DIR}

cleanlib: kokkos-clean
	rm -rf {BUILD_DIR}/Kokkos*

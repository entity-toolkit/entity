# # # # # Scripts # # # # # # # # # # # #
#
rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))
# # # # # Directories # # # # # # # # # #
#
ROOT_DIR := $(realpath ${CURDIR}/..)
# directory for the building
BUILD_DIR := @BUILD_DIR@
# directory for the executable
BIN_DIR := ${ROOT_DIR}/@BIN_DIR@

TARGET := @NTT_TARGET@
TEST_TARGET := @TEST_TARGET@

NTT_DIR := ${ROOT_DIR}/@NTT_DIR@
BUILD_NTT_DIR := @NTT_DIR@

PGEN_DIR := ${ROOT_DIR}/@NTT_DIR@/@PGEN_DIR@

PGEN := @PGEN@

TEST_DIR := ${ROOT_DIR}/@TEST_DIR@
BUILD_TEST_DIR := @TEST_DIR@

EXAMPLES_DIR := ${ROOT_DIR}/@EXAMPLES_DIR@
BUILD_EXAMPLES_DIR := @EXAMPLES_DIR@

SRC_DIR := ${ROOT_DIR}/@SRC_DIR@
BUILD_SRC_DIR := @SRC_DIR@

# external libraries
EXT_DIR := ${ROOT_DIR}/@EXTERN_DIR@

# # # # # Settings # # # # # # # # # # # #
#
DEBUGMODE := @DEBUGMODE@
VERBOSE := @VERBOSE@

DEFINITIONS := @DEFINITIONS@

ifeq ($(strip ${VERBOSE}), y)
	HIDE =
	PREPFLAGS = -DVERBOSE
else
	HIDE = @
endif

# 3-rd party library configurations
KOKKOS_PATH := ${EXT_DIR}/kokkos
KOKKOS_BUILD_DIR = ${BUILD_DIR}/kokkos/

KOKKOS_ARCH := @KOKKOS_ARCH@
KOKKOS_DEVICES := @KOKKOS_DEVICES@
KOKKOS_OPTIONS := @KOKKOS_OPTIONS@

KOKKOS_CUDA_OPTIONS := @KOKKOS_CUDA_OPTIONS@
KOKKOS_CXX_STANDARD := @CXXSTANDARD@

PREPFLAGS := ${PREPFLAGS} @KOKKOS_LOOP_LAYOUT@ @KOKKOS_VECTOR_LENGTH@

# # # # # Compiler and flags # # # # # # #
#
CXX := @COMPILER@
LINK := ${CXX}
CXXSTANDARD := -std=@CXXSTANDARD@
ifeq ($(strip ${DEBUGMODE}), n)
	# linker configuration flags (e.g. optimization level)
	CFLAGS := @RELEASE_CFLAGS@
else
	CFLAGS := @DEBUG_CFLAGS@
endif

# warning flags
WARNFLAGS := @WARNING_FLAGS@

# custom preprocessor flags
PREPFLAGS := $(PREPFLAGS) @PRECISION@

CFLAGS := $(CFLAGS) $(WARNFLAGS) $(PREPFLAGS)
LIBS :=

# # # # # Targets # # # # # # # # # # # # # #
#
.PHONY: all help ntt test examples clean demo cleanlib pgenIsSpecified

default: help demo

all: ntt test examples

# linking the main app
ntt : pgenIsSpecified ${BIN_DIR}/${TARGET}
	@echo [M]aking $@

# Problem generator
pgenIsSpecified:
ifeq (${PGEN},)
	$(error ERROR: no problem generator specified)
endif

ifeq (${PGEN},)
PGEN := ntt_dummy
endif

# linking tests
test : copyPgen ${BIN_DIR}/${TEST_TARGET}
	@echo [M]aking $@

examples : $(EXAMPLES_TARGETS)
	@echo [M]aking $@

help:
	@echo
	@echo "usage: \`make [ntt|test|examples|all|demo]\`"
	@echo
	@echo "cleanup: \`make clean\`"
	@echo
	@echo "---------------"
	@echo "for developers:"
	@echo
	@echo "use \`make [CLANG_COMMAND]\` to check the code matches with best practices & consistent stylistics"
	@echo
	@echo "list of all \`[CLANG_COMMAND]\`-s:"
	@echo "   clang-tidy-naming       : test if the naming of variables/functionts/etc is consistent"
	@echo "   clang-format            : test if the code formatting is consistent"
	@echo "   clang-format-fix        : same as \`clang-format\` except now fix the issues"
	@echo "   clang-tidy              : check if the code contains any bad practices or other deprecated features"
	@echo "   clang-tidy-bugprone     : check if the code contains any bug-prone features"
	@echo "   clang-all               : run \`clang-tidy-naming\`, \`clang-format\` and \`clang-tidy\`"
	@echo

demo:
	@echo "[C]ompile command:"
	@echo ${compile_command} -c \<.cpp\> -o \<.o\>
	@echo
	@echo "[L]ink command:"
	@echo ${link_command} \<.o\> $(LIBS) -o \<EXE\>

# # # # # File collection # # # # # # # # # # #
#
# Main core
SRCS := $(shell find ${SRC_DIR} -name *.cpp -or -name *.c)
OBJS := $(subst ${SRC_DIR},${BUILD_SRC_DIR},$(SRCS:%=%.o))
DEPS := $(OBJS:.o=.d)

# NTT app
NTT_SRCS := $(shell find ${NTT_DIR} -path ${PGEN_DIR} -prune -false -o -name *.cpp -or -name *.c) ${PGEN_DIR}/${PGEN}.cpp
NTT_OBJS := $(subst ${NTT_DIR},${BUILD_NTT_DIR},$(NTT_SRCS:%=%.o))
NTT_DEPS := $(NTT_OBJS:.o=.d)

# Tests
TEST_SRCS := $(shell find ${TEST_DIR} -name *.cpp -or -name *.c)
TEST_OBJS := $(subst ${TEST_DIR},${BUILD_TEST_DIR},$(TEST_SRCS:%=%.o))
TEST_DEPS := $(TEST_OBJS:.o=.d)

# Tests
EXAMPLES_SRCS := $(shell find ${EXAMPLES_DIR} -name *.cpp -or -name *.c)
EXAMPLES_TARGETS := $(subst ${EXAMPLES_DIR},${BIN_DIR}/${BUILD_EXAMPLES_DIR},$(EXAMPLES_SRCS:.cpp=.exec))
EXAMPLES_OBJS := $(subst ${EXAMPLES_DIR},${BUILD_EXAMPLES_DIR},$(EXAMPLES_SRCS:%=%.o))
EXAMPLES_DEPS := $(EXAMPLES_OBJS:.o=.d)

ALL_DEPS := $(DEPS) $(NTT_DEPS) $(TEST_DEPS) $(EXAMPLES_DEPS)

INC_DIRS := $(shell find ${SRC_DIR} -type d) ${EXT_DIR} ${EXT_DIR}/plog/include ${NTT_DIR}
INCFLAGS := $(addprefix -I,${INC_DIRS})

ALL_OBJS := $(OBJS) $(NTT_OBJS) $(TEST_OBJS) $(EXAMPLES_OBJS)

# # # # # Link/compile # # # # # # # # # # # # # #
#
# using `Kokkos`
include ${KOKKOS_PATH}/Makefile.kokkos
OBJS := $(OBJS) $(KOKKOS_LINK_DEPENDS)
CFLAGS := $(CFLAGS) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS)
LDFLAGS := $(LDFLAGS) $(KOKKOS_LDFLAGS)
LIBS := $(LIBS) $(KOKKOS_LIBS)

compile_command := ${CXX} ${CXXSTANDARD} $(INCFLAGS) $(DEFINITIONS) $(CFLAGS) -MMD
link_command := ${LINK} $(LDFLAGS)

${BIN_DIR}/${TARGET} : $(NTT_OBJS) $(OBJS)
	@echo [L]inking $(notdir $@) from $<
	$(HIDE)${link_command} $(NTT_OBJS) $(OBJS) $(LIBS) -o $@

${BIN_DIR}/${TEST_TARGET} : $(TEST_OBJS) $(OBJS)
	@echo [L]inking $(notdir $@) from $^
	$(HIDE)${link_command} $(TEST_OBJS) $(OBJS) $(LIBS) -o $@

# generate linking rules for example targets
define generateExampleLinkingRules
$(1): $(2) $(OBJS)
	@echo [L]inking $(1) from $(2)
	$(HIDE)${link_command} $(2) $(OBJS) $(LIBS) -o $(1)
endef
$(foreach et, $(EXAMPLES_TARGETS), $(eval $(call generateExampleLinkingRules, ${et}, ${BUILD_EXAMPLES_DIR}/$(notdir $(et:.exec=.cpp.o)))))

# generate compilation rules for all `.o` files (except for `simulation.cpp`)
define generateRules
$(1): $(2)
	@echo [C]ompiling $(subst ${ROOT_DIR}/,,$(2))
	$(HIDE)mkdir -p ${BIN_DIR}
	$(HIDE)mkdir -p ${BIN_DIR}/${BUILD_EXAMPLES_DIR}
	$(HIDE)mkdir -p $(dir $(1))
	$(HIDE)${compile_command} -include ${PGEN_DIR}/${PGEN}.hpp -c $(2) -o $(1)
endef
$(foreach obj, $(ALL_OBJS), $(eval $(call generateRules, ${obj}, ${ROOT_DIR}/$(subst .o,,$(obj)))))

clean:
	rm -rf ${BUILD_SRC_DIR} ${BUILD_NTT_DIR} ${BUILD_TEST_DIR} ${BUILD_EXAMPLES_DIR}
	rm -rf ${BIN_DIR}

cleanlib: kokkos-clean
	rm -rf {BUILD_DIR}/Kokkos*

-include $(ALL_DEPS)

# for developers:

.PHONY: clang-all clang-tidy-naming clang-format-fix clang-format clang-tidy clang-tidy-bugprone

SOURCES := $(SRCS) $(NTT_SRCS) $(TEST_SRCS) $(EXAMPLES_SRCS)
ALLCODE := $(SOURCES) $(call rwildcard, ${SRC_DIR}, *.hpp) $(call rwildcard, ${SRC_DIR}, *.h) $(call rwildcard, ${NTT_DIR}, *.hpp) $(call rwildcard, ${NTT_DIR}, *.h) $(call rwildcard, ${TEST_DIR}, *.hpp) $(call rwildcard, ${TEST_DIR}, *.h) $(call rwildcard, ${EXAMPLES_DIR}, *.hpp) $(call rwildcard, ${EXAMPLES_DIR}, *.h)
flags := $(INCFLAGS) $(DEFINITIONS) $(CFLAGS) $(KOKKOS_CPPFLAGS) $(KOKKOS_CXXFLAGS) $(INCFLAGS) -include ${PGEN_DIR}/${PGEN}.hpp

print:
	@echo ${ALLCODE}

clang-all : clang-tidy-naming clang-format clang-tidy

clang-tidy-naming:
	@for src in $(SOURCES) ; do \
		echo "checking namings in $$src:" ;\
		clang-tidy -quiet -checks='-*,readability-identifier-naming' \
		    -config="{CheckOptions: [ \
		    { key: readability-identifier-naming.NamespaceCase, value: lower_case },\
		    { key: readability-identifier-naming.ClassCase, value: CamelCase  },\
		    { key: readability-identifier-naming.StructCase, value: CamelCase  },\
		    { key: readability-identifier-naming.FunctionCase, value: camelBack },\
		    { key: readability-identifier-naming.VariableCase, value: lower_case },\
		    { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE }\
		    ]}" "$$src" -extra-arg=${CXXSTANDARD} -- $(flags);\
	done
	@echo "clang-tidy-naming -- done"

clang-format:
	@for src in $(ALLCODE) ; do \
		var=`clang-format $$src | diff $$src - | wc -l` ; \
		if [ $$var -ne 0 ] ; then \
			diff=`clang-format $$src | diff $$src -` ; \
			echo "$$src:" ; \
			echo "$$diff" ; \
			echo ; \
		fi ; \
	done
	@echo "clang-format -- done"

clang-format-fix:
	@for src in $(ALLCODE) ; do \
		var=`clang-format $$src | diff $$src - | wc -l` ; \
		if [ $$var -ne 0 ] ; then \
			echo "formatting $$src:" ;\
			diff=`clang-format $$src | diff $$src -` ; \
			clang-format -i "$$src" ; \
			echo "$$diff" ; \
			echo ; \
		fi ; \
	done
	@echo "clang-format-fix -- done"

# TODO: get rid of KOKKOS and other files in tidy

clang-tidy:
	@for src in $(SOURCES) ; do \
		echo "tidying $$src:" ; \
		clang-tidy -quiet -checks="-*,\
			clang-diagnostic-*,clang-analyzer-*,modernize-*,-modernize-avoid-c-arrays*,\
			readability-*,performance-*,openmp-*,mpi-*,-performance-no-int-to-ptr" \
			-header-filter=".*\\b(ntt|src|test|examples)\\b\\/(?!lib).*" \
			"$$src" -extra-arg=${CXXSTANDARD} -- $(flags); \
	done
	@echo "clang-tidy -- done"

clang-tidy-bugprone:
	@for src in $(SOURCES) ; do \
		echo "tidying $$src:" ; \
		clang-tidy -quiet -checks="-*,bugprone-*",\
			-header-filter=".*\\b(ntt|src|test|examples)\\b\\/(?!lib).*" \
			"$$src" -extra-arg=${CXXSTANDARD} -- $(flags); \
	done
	@echo "clang-tidy-bugprone -- done"
